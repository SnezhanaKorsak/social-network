{"version":3,"sources":["components/Friends/Pagination.module.css","components/Friends/Friends.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPost.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Header/Header.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/dialogsReducer.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","assets/images/avatarnotfound.jpg","components/Friends/Friends.tsx","redux/friendsReducer.ts","components/Friends/FriendsContainer.tsx","components/Friends/Pagination/Pagination.tsx","redux/paginationReducer.ts","components/Friends/Pagination/PaginationContainer.tsx","components/Friends/FriendsPage.tsx","App.tsx","redux/sideBarReducer.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","s","header","src","Navbar","nav","item","to","PATH","PROFILE","activeClassName","active","DIALOGS","NEWS","MUSIC","FIND_FRIENDS","SETTINGS","ProfileInfo","cover","contentInfo","mainAvatar","describeProfile","ADD_POST","UPDATE_NEW_POST","initialState","posts","id","message","likeCount","newPostText","Post","props","MyPostsContainer","connect","state","profilePage","dispatch","addPost","type","postText","updateNewPost","newText","onPostChangeAC","postsElement","map","p","postBlock","value","onChange","e","currentTarget","button","onClick","Profile","content","News","Music","Settings","ADD_MESSAGE","UPDATE_NEW_MESSAGE","dialogs","name","messages","newTextMessage","DialogItem","path","dialog","Message","DialogsContainer","dialogPage","addMessage","messageText","addMessageAC","onMessageChange","newMessage","onMessageChangeAC","dialogElements","d","messagesElements","msg","placeholder","dialogsItem","Friends","axios","get","this","currentPage","pageSize","response","setFriends","data","items","setTotalCount","totalCount","page","setCurrentPage","pagesCount","Math","ceil","pages","i","push","friendsPage","friends","f","friendsItem","generalBlock","avatar","alt","photos","small","userPhoto","info","status","location","buttonFollow","fId","followed","unfollow","follow","React","Component","FriendsContainer","userId","followAC","unfollowAC","setFriendsAC","setCurrentPageAC","setTotalCountAC","LEFT_PAGE","RIGHT_PAGE","range","from","step","Pagination","fetchPageNumbers","totalPages","totalRecords","pageLimit","pageNeighbours","totalNumbers","startPage","max","endPage","min","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","handleClick","handleMoveLeft","previousPage","handleMoveRight","nextPage","paginationBlock","totalCounter","selectedItem","totalBlocks","index","pageItem","aria-hidden","selectedPage","PaginationContainer","pagination","FriendsPage","App","exact","render","rootReducer","combineReducers","action","newPost","Date","getTime","sidebar","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57ddd91e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlock\":\"Pagination_paginationBlock__XxS9X\",\"totalCounter\":\"Pagination_totalCounter__1l8n3\",\"currentPage\":\"Pagination_currentPage__2F-6V\",\"totalBlocks\":\"Pagination_totalBlocks___veEX\",\"pageItem\":\"Pagination_pageItem__W9Yb9\",\"selectedPage\":\"Pagination_selectedPage__139Ia\",\"selectedItem\":\"Pagination_selectedItem__12n9q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsItem\":\"Friends_friendsItem__1z8Rr\",\"generalBlock\":\"Friends_generalBlock__1nnYb\",\"avatar\":\"Friends_avatar__19sMf\",\"info\":\"Friends_info__1B_iw\",\"name\":\"Friends_name__1H0jP\",\"buttonFollow\":\"Friends_buttonFollow__3Rq8Q\",\"location\":\"Friends_location__gZKax\",\"selectedPage\":\"Friends_selectedPage__2k4r0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentInfo\":\"ProfileInfo_contentInfo__2zTE7\",\"mainAvatar\":\"ProfileInfo_mainAvatar__2z29I\",\"cover\":\"ProfileInfo_cover__2z3gO\",\"describeProfile\":\"ProfileInfo_describeProfile__1_7Ui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3FZa8\",\"dialogsItem\":\"Dialogs_dialogsItem__1PTrf\",\"messages\":\"Dialogs_messages__XRR94\",\"button\":\"Dialogs_button__w9F2l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPost_postBlock__1hg6I\",\"posts\":\"MyPost_posts__9OGtt\",\"button\":\"MyPost_button__6BLQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Rw3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__-cKzQ\",\"active\":\"DialogItem_active__gIi1x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1vXGy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1zCja\",\"item\":\"Navbar_item__24pIL\",\"active\":\"Navbar_active__3Lxyu\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nexport function Header() {\r\n    return (\r\n\r\n            <header className={s.header}>\r\n                <img src='https://pbs.twimg.com/profile_banners/1341675636151132160/1608715543/1500x500' />\r\n            </header>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\nexport function Navbar () {\r\n\r\n    return (\r\n            <nav className={s.nav}>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.DIALOGS} activeClassName={s.active}>Messages</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.NEWS} activeClassName={s.active}>News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.MUSIC} activeClassName={s.active}>Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.FIND_FRIENDS} activeClassName={s.active}>Friends</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.SETTINGS} activeClassName={s.active}>Settings</NavLink>\r\n                </div>\r\n            </nav>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nexport function ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div className={s.cover}>\r\n                <img\r\n                    src='https://catherineasquithgallery.com/uploads/posts/2021-02/1612889502_62-p-krasnii-kiberpank-fon-101.jpg'/>\r\n            </div>\r\n            <div className={s.contentInfo}>\r\n                <div className={s.mainAvatar}>\r\n                    <img src='https://telegra.ph/file/88a8f1c2805439c4c0d86.jpg'/>\r\n                </div>\r\n                <div className={s.describeProfile}>\r\n                    My profile description\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST = 'UPDATE-NEW-POST';\r\n\r\nexport type PostType = {\r\n    id: number;\r\n    message: string;\r\n    likeCount: number;\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>;\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n        posts: [\r\n            {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n            {id: 2, message: \"It's my first post\", likeCount: 24},\r\n        ],\r\n        newPostText: ''\r\n    }\r\n\r\nexport const profileReducer = (state= initialState, action: ActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postText,\r\n                likeCount: 0\r\n            }\r\n           // state.posts.push(newPost)\r\n\r\n            return {...state, posts: [...state.posts, newPost], newPostText: ''};\r\n\r\n        case UPDATE_NEW_POST:\r\n            return {...state, newPostText: action.newText};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addPostAC> | ReturnType<typeof onPostChangeAC>\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        postText: postText\r\n    } as const\r\n}\r\n\r\nexport const onPostChangeAC = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST,\r\n        newText: newText\r\n    } as const\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostTypeProps = {\r\n    message: string;\r\n    id: number;\r\n    likeCount: number;\r\n}\r\n\r\nexport function Post(props: PostTypeProps) {\r\n    return (\r\n        <div>\r\n            <div className={s.posts}>\r\n                <div className={s.item}>\r\n                    <img src='https://telegra.ph/file/88a8f1c2805439c4c0d86.jpg'/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>like: {props.likeCount} </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {addPostAC, onPostChangeAC, ProfilePageType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (message: string) => void\r\n    updateNewPost: (newText: string) => void\r\n}\r\n\r\nconst mapStatePropsType = (state: AppStateType): MapStatePropsType =>  {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (message: string) => {\r\n            dispatch(addPostAC(message))\r\n        },\r\n        updateNewPost: (newText: string) => {\r\n            dispatch(onPostChangeAC(newText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStatePropsType, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPost.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {ProfilePageType} from \"../../../redux/profileReducer\";\r\n\r\n\r\ntype MyPostsProps = {\r\n    profilePage: ProfilePageType\r\n    addPost: (message: string) => void\r\n    updateNewPost: (newText: string) => void\r\n}\r\n\r\n\r\nexport function MyPosts(props: MyPostsProps) {\r\n\r\n    const addPost = () => {\r\n        props.addPost(props.profilePage.newPostText)\r\n        props.updateNewPost('')\r\n    }\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPost(e.currentTarget.value)\r\n    }\r\n\r\n    let postsElement =\r\n        props.profilePage.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div>\r\n                <h3>My posts:</h3>\r\n                <div>\r\n                    <div>\r\n                        <textarea value={props.profilePage.newPostText} onChange={onPostChange}/>\r\n                    </div>\r\n                    <div>\r\n                        <button className={s.button} onClick={addPost}>Add Post</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\n\r\n\r\ntype ProfileProps = {\r\n    /*store: StoreType*/\r\n  /*  dispatch: (action: ActionsType) => void*/\r\n}\r\n\r\nexport function Profile(props: ProfileProps) {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function News() {\r\n    return (\r\n        <div>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Music() {\r\n    return (\r\n        <div>\r\n          Music\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Settings() {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\nconst UPDATE_NEW_MESSAGE = 'UPDATE-NEW-MESSAGE';\r\n\r\nexport type DialogType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type MessageType = {\r\n    id: number;\r\n    message: string;\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>;\r\n    messages: Array<MessageType>;\r\n    newTextMessage: string\r\n}\r\n\r\nconst initialState: DialogPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Terra\"},\r\n        {id: 2, name: \"Azumy\"},\r\n        {id: 3, name: \"Bria\"},\r\n        {id: 4, name: \"Keren\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi! How are yoy?\"},\r\n        {id: 2, message: \"Don't give up!\"},\r\n        {id: 3, message: \"Just do it\"},\r\n        {id: 4, message: \"Could you help me?\"}\r\n    ],\r\n    newTextMessage: '',\r\n}\r\n\r\nexport const dialogReducer = (state = initialState, action: ActionType):DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n            id:  new Date().getTime(),\r\n            message: action.messageText\r\n        }\r\n            return {...state, messages: [...state.messages, newMessage], newTextMessage: ''}\r\n\r\n        case UPDATE_NEW_MESSAGE:\r\n           // state.newTextMessage = action.newMessage\r\n            return {...state, newTextMessage: action.newMessage}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addMessageAC> | ReturnType<typeof onMessageChangeAC>\r\n\r\nexport const addMessageAC = (messageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        messageText: messageText\r\n    } as const\r\n}\r\n\r\nexport const onMessageChangeAC = (newMessage: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE,\r\n        newMessage: newMessage\r\n    } as const\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./DialogItem.module.css\"\r\n\r\n\r\n\r\ntype DialogItemProps = {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport function DialogItem(props: DialogItemProps) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\ntype DialogMessageProps = {\r\n    message: string;\r\n    id: number;\r\n}\r\n\r\nexport function Message(props: DialogMessageProps) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {addMessageAC, DialogPageType, onMessageChangeAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//здесь пример с использование Consumer\r\n/*export function DialogsContainer(props: DialogsContainerProps) {\r\n\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {(store) => {\r\n                const state = store.getState();\r\n\r\n                const addMessage = (messageText: string) => {\r\n                    store.dispatch(addMessageAC(messageText))\r\n                    store.dispatch(onMessageChangeAC(''))\r\n                }\r\n                const onMessageChange = (newMessage: string) => {\r\n                    store.dispatch(onMessageChangeAC(newMessage))\r\n                }\r\n\r\n                return <Dialogs dialogPage={state.dialogPage}\r\n                                addMessage={addMessage}\r\n                                onMessageChange={onMessageChange}/>\r\n            }}\r\n\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (messageText: string) => void\r\n    onMessageChange: (newMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (messageText: string) => {\r\n            dispatch(addMessageAC(messageText))\r\n        },\r\n        onMessageChange: (newMessage: string) => {\r\n            dispatch(onMessageChangeAC(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/dialogsReducer\";\r\n\r\n\r\ntype DialogsProps = {\r\n    dialogPage: DialogPageType;\r\n    addMessage: (messageText: string) => void\r\n    onMessageChange: (newMessage: string) => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsProps) {\r\n\r\n\r\n    const addMessage = () => {\r\n        props.addMessage(props.dialogPage.newTextMessage)\r\n        props.onMessageChange('')\r\n    }\r\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onMessageChange(e.currentTarget.value)\r\n    }\r\n\r\n    let dialogElements =\r\n        props.dialogPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n\r\n    let messagesElements =\r\n        props.dialogPage.messages.map(msg => <Message key={msg.id} message={msg.message} id={msg.id}/>);\r\n\r\n    return (\r\n        <>\r\n            <textarea value={props.dialogPage.newTextMessage}\r\n                      onChange={onMessageChange}\r\n                      placeholder={'Enter your message'}/>\r\n\r\n            <div>\r\n                <button className={s.button} onClick={addMessage}>Add Message</button>\r\n            </div>\r\n\r\n            <div className={s.dialogs}>\r\n\r\n                <div className={s.dialogsItem}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/avatarnotfound.86317f4b.jpg\";","import React from \"react\";\r\nimport s from \"./Friends.module.css\";\r\nimport userPhoto from \"../../assets/images/avatarnotfound.jpg\";\r\nimport axios from \"axios\";\r\nimport {FriendsPropsType} from \"./FriendsContainer\";\r\n\r\n\r\nexport class Friends extends React.Component<FriendsPropsType> {\r\n\r\n    componentDidMount(): void {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setFriends(response.data.items);\r\n                this.props.setTotalCount(response.data.totalCount)\r\n            })\r\n    }\r\n    currentPageHandler (page: number){\r\n        this.props.setCurrentPage(page)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${page}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setFriends(response.data.items)\r\n            })\r\n\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const followHandler = (fId: number, followStatus: boolean) => {\r\n            followStatus ? this.props.unfollow(fId) : this.props.follow(fId)\r\n        }\r\n\r\n        let pagesCount = Math.ceil(this.props.totalCount / this.props.pageSize)\r\n        let pages = []\r\n        for (let i = 1; i <= pagesCount; i++) {\r\n            if(i < 8) {\r\n                pages.push(i)\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {/*<div>\r\n                    {pages.map(p => {\r\n                            return <span className={`${this.props.currentPage === p && s.selectedPage}`}\r\n                            onClick={()=>this.currentPageHandler(p)}>\r\n                                {p}</span>\r\n                        }\r\n                    )}\r\n                </div>\r\n*/}\r\n                {this.props.friendsPage.friends.map(f => <div key={f.id} className={s.friendsItem}>\r\n                <span className={s.generalBlock}>\r\n                    <div>\r\n                        <img className={s.avatar} alt={'userAvatar'}\r\n                             src={f.photos.small != null ? f.photos.small : userPhoto}/>\r\n                    </div>\r\n\r\n                    <span className={s.info}>\r\n                        <div className={s.name}>{f.name}</div>\r\n                        <div>{f.status}</div>\r\n                    </span>\r\n\r\n                    <span className={s.location}>\r\n                        <div>{'f.location.country'}</div>\r\n                        <div>{'f.location.city'}</div>\r\n\r\n                        <button className={s.buttonFollow} onClick={() => followHandler(f.id, f.followed)}>\r\n                            {f.followed ? \"Follow\" : \"Unfollow\"}\r\n                        </button>\r\n\r\n                    </span>\r\n\r\n\r\n                </span>\r\n\r\n                </div>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export  type LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type FriendType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type initialStateType = {\r\n    friends: Array<FriendType>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n}\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    friends: [],\r\n    pageSize: 4,\r\n    totalCount: 0,\r\n    currentPage: 1\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {...state, friends: state.friends.map(f => f.id === action.userId ? {...f, followed: true} : f)};\r\n\r\n        case \"UNFOLLOW\":\r\n            return {...state, friends: state.friends.map(f => f.id === action.userId ? {...f, followed: false} : f)};\r\n\r\n        case \"SET-FRIENDS\":\r\n            return {...state, friends: action.friends}\r\n\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.page}\r\n        case \"SET-TOTAL-COUNT\":\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof followAC> |\r\n    ReturnType<typeof unfollowAC> |\r\n    ReturnType<typeof setFriendsAC> |\r\n    ReturnType<typeof setCurrentPageAC>|\r\n    ReturnType<typeof setTotalCountAC>\r\n\r\nexport const followAC = (userId: number) => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const unfollowAC = (userId: number) => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const setFriendsAC = (friends: Array<FriendType>) => {\r\n    return {\r\n        type: \"SET-FRIENDS\",\r\n        friends\r\n    } as const\r\n}\r\nexport const setCurrentPageAC = (page: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        page\r\n    } as const\r\n}\r\nexport const setTotalCountAC = (totalCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-COUNT\",\r\n        totalCount\r\n    } as const\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Friends} from \"./Friends\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    followAC,\r\n    FriendType,\r\n    initialStateType,\r\n    setCurrentPageAC,\r\n    setFriendsAC, setTotalCountAC,\r\n    unfollowAC\r\n} from \"../../redux/friendsReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type FriendsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nexport type mapStatePropsType = {\r\n    friendsPage: initialStateType\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n}\r\nexport type mapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setFriends: (friends: Array<FriendType>) => void\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (totalCount: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        friendsPage: state.friendsPage,\r\n        pageSize: state.friendsPage.pageSize,\r\n        totalCount: state.friendsPage.totalCount,\r\n        currentPage: state.friendsPage.currentPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollowAC(userId))\r\n        },\r\n        setFriends: (friends: Array<FriendType>) => {\r\n            dispatch(setFriendsAC(friends))\r\n        },\r\n        setCurrentPage: (page: number) => {\r\n            dispatch(setCurrentPageAC(page))\r\n        },\r\n        setTotalCount: (totalCount: number) => {\r\n            dispatch(setTotalCountAC(totalCount))\r\n        },\r\n    }\r\n}\r\n\r\nexport const FriendsContainer = connect(mapStateToProps, mapDispatchToProps)(Friends)\r\n","import React from \"react\";\r\nimport {PaginationPropsType} from \"./PaginationContainer\";\r\nimport axios from \"axios\";\r\nimport s from \"../Pagination.module.css\";\r\n\r\nconst LEFT_PAGE = 'LEFT';\r\nconst RIGHT_PAGE = 'RIGHT';\r\n\r\nconst range = (from: number | string, to: number, step = 1) => {\r\n    let i = from;\r\n    const range = [];\r\n\r\n    while (i <= to) {\r\n        range.push(i);\r\n        typeof i === \"number\" ? i += step : i = 0;\r\n    }\r\n\r\n    return range;\r\n}\r\n\r\n//https://www.digitalocean.com/community/tutorials/how-to-build-custom-pagination-with-react-ru\r\n\r\nexport class Pagination extends React.Component<PaginationPropsType> {\r\n\r\n    fetchPageNumbers = () => {\r\n        const totalPages = Math.ceil(this.props.totalRecords / this.props.pageLimit);\r\n        const currentPage = this.props.currentPage;\r\n        const pageNeighbours = this.props.pageNeighbours;\r\n\r\n        const totalNumbers = (pageNeighbours * 2) + 3;\r\n        const totalBlocks = totalNumbers + 2;\r\n\r\n        if (totalPages > totalBlocks) {\r\n            const startPage = Math.max(2, currentPage - pageNeighbours);\r\n            const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n            let pages = range(startPage, endPage);\r\n            const hasLeftSpill = startPage > 2;\r\n            const hasRightSpill = (totalPages - endPage) > 1;\r\n            const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n            switch (true) {\r\n                // handle: (1) < {5 6} [7] {8 9} (10)\r\n                case (hasLeftSpill && !hasRightSpill): {\r\n                    const extraPages = range(startPage - spillOffset, startPage - 1);\r\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n                    break;\r\n                }\r\n\r\n                // handle: (1) {2 3} [4] {5 6} > (10)\r\n                case (!hasLeftSpill && hasRightSpill): {\r\n                    const extraPages = range(endPage + 1, endPage + spillOffset);\r\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n\r\n                // handle: (1) < {4 5} [6] {7 8} > (10)\r\n                case (hasLeftSpill && hasRightSpill):\r\n                default: {\r\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return [1, ...pages, totalPages];\r\n        }\r\n\r\n        return range(1, totalPages);\r\n    }\r\n\r\n    handleClick = (page: number | string) => {\r\n        if (typeof page === \"number\") {\r\n            this.props.setCurrentPage(page)\r\n            axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${page}&count=${this.props.pageLimit}`)\r\n                .then(response => {\r\n                    this.props.setFriends(response.data.items)\r\n                })\r\n        }\r\n    }\r\n    handleMoveLeft = () => {\r\n        const previousPage = this.props.currentPage - (this.props.pageNeighbours * 2) - 1\r\n        this.props.setCurrentPage(previousPage)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${previousPage}&count=${this.props.pageLimit}`)\r\n            .then(response => {\r\n                this.props.setFriends(response.data.items)\r\n            })\r\n    }\r\n    handleMoveRight = () => {\r\n        const nextPage =this.props.currentPage + (this.props.pageNeighbours * 2) + 1\r\n        this.props.setCurrentPage(nextPage)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${nextPage}&count=${this.props.pageLimit}`)\r\n            .then(response => {\r\n                this.props.setFriends(response.data.items)\r\n            })\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users`)\r\n            .then(response => {\r\n                this.props.setTotalCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const totalPages = Math.ceil(this.props.totalRecords / this.props.pageLimit);\r\n        const pages = this.fetchPageNumbers()\r\n        if (!this.props.totalRecords || totalPages === 1) return null\r\n\r\n        return (\r\n            <nav className={s.paginationBlock}>\r\n                <div className={s.totalCounter}>\r\n                   <span className={s.selectedItem}>{this.props.totalRecords}</span>  Users\r\n                </div>\r\n\r\n                <div className={s.currentPage}>\r\n                   Page   <span className={s.selectedItem}>{this.props.currentPage}</span>/{totalPages}\r\n                   {/*{`Page ${this.props.currentPage}/${totalPages}`}*/}\r\n                </div>\r\n\r\n                <ul className={s.totalBlocks}>\r\n                    {pages.map((page, index) => {\r\n                        if (page === LEFT_PAGE) return (\r\n                            <li key={index} className={s.pageItem}>\r\n                                <span aria-hidden=\"true\"\r\n                                      onClick={this.handleMoveLeft}>&laquo;</span>\r\n                                {/*<span className=\"sr-only\"\r\n                                      onClick={this.handleMoveLeft}>Previous</span>*/}\r\n                            </li>\r\n                        );\r\n\r\n                        if (page === RIGHT_PAGE) return (\r\n                            <li key={index} className={s.pageItem}>\r\n                                <span aria-hidden=\"true\"\r\n                                      onClick={this.handleMoveRight}>&raquo;</span>\r\n                                {/* <span className=\"sr-only\"\r\n                                      onClick={this.handleMoveRight}>Next</span>*/}\r\n                            </li>\r\n                        );\r\n\r\n                        return (\r\n                            <li key={index}\r\n                                className={`${s.pageItem} ${this.props.currentPage === page && s.selectedPage}`}\r\n                                onClick={() => this.handleClick(page)}>\r\n                                {page}\r\n                            </li>\r\n                        )\r\n\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n\r\n        )\r\n    }\r\n}\r\n","import {FriendType} from \"./friendsReducer\";\r\n\r\nexport type initialStateType = {\r\n    pageLimit: number\r\n    totalRecords: number\r\n    pageNeighbours:  number\r\n    currentPage: number\r\n}\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    totalRecords: 0,\r\n    pageLimit: 4,\r\n    pageNeighbours: 1,\r\n    currentPage: 5\r\n}\r\n\r\nexport const paginationReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.page}\r\n        case \"SET-TOTAL-COUNT\":\r\n            return {...state, totalRecords: action.totalCount}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setCurrentPageAC> |\r\n    ReturnType<typeof setTotalCountAC> |\r\n    ReturnType<typeof setFriendsAC>\r\n\r\n\r\nexport const setCurrentPageAC = (page: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        page\r\n    } as const\r\n}\r\nexport const setTotalCountAC = (totalCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-COUNT\",\r\n        totalCount\r\n    } as const\r\n}\r\nexport const setFriendsAC = (friends: Array<FriendType>) => {\r\n    return {\r\n        type: \"SET-FRIENDS\",\r\n        friends\r\n    } as const\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {Pagination} from \"./Pagination\";\r\nimport {FriendType} from \"../../../redux/friendsReducer\";\r\nimport {setCurrentPageAC, setFriendsAC, setTotalCountAC} from \"../../../redux/paginationReducer\";\r\n\r\nexport type PaginationPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nexport type mapStatePropsType = {\r\n    pageLimit: number\r\n    totalRecords: number\r\n    pageNeighbours:  number\r\n    currentPage: number\r\n}\r\nexport type mapDispatchPropsType = {\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (totalCount: number) => void\r\n    setFriends: (friends: Array<FriendType>) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        pageLimit: state.pagination.pageLimit,\r\n        totalRecords: state.pagination.totalRecords,\r\n        pageNeighbours: state.pagination.pageNeighbours,\r\n        currentPage: state.friendsPage.currentPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        setCurrentPage: (page: number) => {\r\n            dispatch(setCurrentPageAC(page))\r\n        },\r\n        setTotalCount: (totalCount: number) => {\r\n            dispatch(setTotalCountAC(totalCount))\r\n        },\r\n        setFriends: (friends: Array<FriendType>) => {\r\n            dispatch(setFriendsAC(friends))\r\n        },\r\n    }\r\n}\r\n\r\nexport const PaginationContainer = connect(mapStateToProps, mapDispatchToProps)(Pagination)\r\n","import React from \"react\";\r\nimport {FriendsContainer} from \"./FriendsContainer\";\r\nimport {PaginationContainer} from \"./Pagination/PaginationContainer\";\r\n\r\nexport const FriendsPage = () => {\r\n    return (\r\n        <>\r\n            <PaginationContainer/>\r\n            <FriendsContainer/>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport {Header} from \"./components/Header/Header\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {Profile} from \"./components/Profile/Profile\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport './App.css';\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {FriendsContainer} from \"./components/Friends/FriendsContainer\";\nimport {FriendsPage} from \"./components/Friends/FriendsPage\";\n\n\ntype AppPropsType = {\n    /*store: StoreType*/\n}\nexport const PATH = {\n    PROFILE: '/profile',\n    DIALOGS: '/dialogs',\n    NEWS: '/news',\n    MUSIC: '/music',\n    SETTINGS: '/settings',\n    FIND_FRIENDS: '/findFriends'\n}\n\n\nfunction App(props: AppPropsType) {\n   /* const state = props.store.getState();*/\n\n    return (\n        <HashRouter>\n            <div className='app-wrapper'>\n                <Header/>\n                <Navbar/>\n                <div className='content'>\n                    <Switch>\n                        <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n\n                        <Route path={PATH.PROFILE}\n                               render={() => <Profile />}/>\n                        <Route path={PATH.DIALOGS}\n                               render={() => <DialogsContainer />}/>\n                        <Route path={PATH.NEWS} render={() => <News/>}/>\n                        <Route path={PATH.MUSIC} render={() => <Music/>}/>\n                        <Route path={PATH.FIND_FRIENDS} render={() => <FriendsPage/>}/>\n                        <Route path={PATH.SETTINGS} render={() => <Settings/>}/>\n                    </Switch>\n                </div>\n\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","export type SidebarType = {}\r\n\r\nconst initialState: SidebarType = {}\r\n\r\nexport const sideBarReducer = (state = initialState, action: any): SidebarType => {\r\n\r\n    return state\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {dialogReducer} from \"./dialogsReducer\";\r\nimport {sideBarReducer} from \"./sideBarReducer\";\r\nimport {friendsReducer} from \"./friendsReducer\";\r\nimport {paginationReducer} from \"./paginationReducer\";\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sidebar: sideBarReducer,\r\n    friendsPage: friendsReducer,\r\n    pagination: paginationReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer)\r\n\r\n\r\n\r\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport {store} from \"./redux/redux-store\";\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}