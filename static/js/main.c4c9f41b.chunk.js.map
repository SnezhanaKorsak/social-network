{"version":3,"sources":["common/Preloader/Preloader.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Friends/Pagination/Pagination.module.css","reportWebVitals.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/Api.tsx","redux/friendsReducer.ts","assets/images/avatarnotfound.jpg","components/Friends/Friends.tsx","assets/images/rings.svg","common/Preloader/Preloader.tsx","components/Friends/FriendsContainer.tsx","components/Friends/Pagination/Pagination.tsx","redux/paginationReducer.ts","components/Friends/Pagination/PaginationContainer.tsx","components/Friends/FriendsPage.tsx","redux/profileReducer.ts","components/Profile/MyPosts/Post/Post.tsx"," validators/validators.ts","common/FormsControl/FormsControl.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","assets/images/noavatar.png","components/Profile/Status/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/dialogsReducer.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/appReducer.ts","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","App.tsx","redux/sideBarReducer.tsx","redux/redux-store.tsx","index.tsx","components/Friends/Friends.module.css","components/Dialogs/Dialogs.module.css","components/Login/Login.module.css","components/Profile/MyPosts/MyPost.module.css","common/FormsControl/FormsControl.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","News","Music","Settings","instance","axios","create","withCredentials","baseURL","headers","UserAPI","currentPage","pageLimit","get","response","data","userId","post","delete","AuthAPI","email","password","rememberMe","ProfileAPI","status","put","initialState","friends","isFetching","followingInProgress","toggleIsFetching","type","followingProgress","Friends","friendsPage","followTC","unfollowTC","map","f","className","s","friendsItem","generalBlock","to","PATH","PROFILE","id","avatar","alt","src","photos","small","userPhoto","info","name","location","buttonFollow","onClick","fId","followed","disabled","some","Preloader","loading","loadingGif","FriendsAPIComponent","this","props","React","Component","FriendsContainer","connect","state","dispatch","resultCode","follow","unfollow","Pagination","totalRecords","fetchPageNumbers","handleClick","handleMoveLeft","handleMoveRight","totalPages","Math","ceil","pages","paginationBlock","totalCounter","selectedItem","totalBlocks","page","index","LEFT_PAGE","pageItem","aria-hidden","RIGHT_PAGE","selectedPage","totalCount","pageNeighbours","setTotalCount","range","from","step","i","push","PaginationAPIComponent","totalNumbers","startPage","max","endPage","min","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","getUsersTC","previousPage","nextPage","PaginationContainer","pagination","items","FriendsPage","ADD_POST","posts","message","likeCount","profile","setUsersProfile","setUserStatus","Post","item","requiredField","value","maxLengthCreator","maxLength","FormControl","input","meta","FormType","error","touched","finalInputName","formControl","errorMessage","Textarea","Input","maxLength100","MyPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","button","MyPostsContainer","profilePage","addPost","postText","postsElement","p","postBlock","values","newPost","ProfileStatus","editMode","activateEditMode","console","log","setState","deactivateEditMode","updateStatus","onStatusChange","e","currentTarget","userStatus","onBlur","onChange","autoFocus","onDoubleClick","ProfileInfo","cover","contentInfo","mainAvatar","describeProfile","basicBlock","basicItem","order","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","vk","instagram","github","Profile","content","mapStateToProps","isAuth","auth","withAuthRedirect","restProps","LOGIN","ProfileContainer","match","params","userAuthId","getUserProfileTC","getUserStatusTC","updateStatusTC","compose","res","withRouter","Header","login","logoutTC","header","loginBlock","loginContainer","setAuthUserData","payload","getUserAPIDataTC","HeaderContainer","LoginReduxForm","itemError","loginTC","messages","stopSubmit","_error","container","formData","ADD_MESSAGE","dialogs","DialogItem","path","dialog","activeClassName","active","Message","AddMessageFormRedux","dialogPage","addMessage","messageText","addMessageAC","dialogElements","d","messagesElements","msg","textarea","textMessage","dialogsItem","initialized","Navbar","nav","DIALOGS","NEWS","MUSIC","FIND_FRIENDS","SETTINGS","NavbarContainer","App","initializeApp","exact","render","DialogsContainer","app","rootReducer","combineReducers","action","Date","getTime","newMessage","sidebar","filter","formReducer","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4c9f41b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Preloader_loading__2wZBc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1zCja\",\"item\":\"Navbar_item__24pIL\",\"active\":\"Navbar_active__3Lxyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentInfo\":\"ProfileInfo_contentInfo__2zTE7\",\"mainAvatar\":\"ProfileInfo_mainAvatar__2z29I\",\"cover\":\"ProfileInfo_cover__2z3gO\",\"describeProfile\":\"ProfileInfo_describeProfile__1_7Ui\",\"basicBlock\":\"ProfileInfo_basicBlock__23AOr\",\"basicItem\":\"ProfileInfo_basicItem__3-wdM\",\"order\":\"ProfileInfo_order__1I44p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBlock\":\"Pagination_paginationBlock__2ptE-\",\"totalCounter\":\"Pagination_totalCounter__2O0No\",\"currentPage\":\"Pagination_currentPage__pGyB_\",\"totalBlocks\":\"Pagination_totalBlocks__F-5JV\",\"pageItem\":\"Pagination_pageItem__CEBnw\",\"selectedPage\":\"Pagination_selectedPage__3jagA\",\"selectedItem\":\"Pagination_selectedItem__2aRyl\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\nexport function News() {\r\n    return (\r\n        <div>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Music() {\r\n    return (\r\n        <div>\r\n          Music\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Settings() {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    headers: {\r\n        'API-KEY': 'c0caff3e-2af3-4ee5-bed5-c0d120d6cc75'\r\n    }\r\n})\r\n\r\n\r\nexport const UserAPI = {\r\n    getUsers(currentPage = 1, pageLimit = 4) {\r\n        return instance.get(`/users?page=${currentPage}&count=${pageLimit}`)\r\n            .then(response => response.data)\r\n    },\r\n    followUser(userId = 2) {\r\n        return instance.post(`/follow/${userId}`, {}).then(response => response.data)\r\n    },\r\n    unfollowUser(userId = 2) {\r\n        return instance.delete(`/follow/${userId}`).then(response => response.data)\r\n    },\r\n\r\n}\r\n\r\nexport const AuthAPI = {\r\n    me () {\r\n        return instance.get('/auth/me').then(response => response.data)\r\n    },\r\n    logIn (email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post('/auth/login', {email, password, rememberMe })\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/login')\r\n    },\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUsersProfile(userId: string) {\r\n        return instance.get(`/profile/` + userId).then(response => response.data)\r\n    },\r\n    getStatus (userId: string) {\r\n        return instance.get(`/profile/status/` + userId)\r\n    },\r\n    updateStatus (status: string) {\r\n        return instance.put(`/profile/status`, {status: status})\r\n    }\r\n}","import {UserAPI} from \"../api/Api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport  type LocationType = {\r\n    country: string\r\n    city: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type FriendType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\nexport type initialStateType = {\r\n    friends: Array<FriendType>\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    friends: [],\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {...state, friends: state.friends.map(f => f.id === action.userId ? {...f, followed: true} : f)};\r\n\r\n        case \"UNFOLLOW\":\r\n            return {...state, friends: state.friends.map(f => f.id === action.userId ? {...f, followed: false} : f)};\r\n\r\n        case \"SET-FRIENDS\":\r\n            return {...state, friends: action.friends}\r\n\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case \"FOLLOWING-PROGRESS\":\r\n            return action.isFetching\r\n                ? {...state, followingInProgress: [...state.followingInProgress, action.userId]}\r\n                : {...state, followingInProgress: state.followingInProgress.filter(id => id !== action.userId)}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setFriends>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof followingProgress>\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        userId\r\n    } as const\r\n}\r\nexport const setFriends = (friends: Array<FriendType>) => {\r\n    return {\r\n        type: \"SET-FRIENDS\",\r\n        friends\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: \"TOGGLE-IS-FETCHING\",\r\n        isFetching\r\n    } as const\r\n}\r\nexport const followingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: \"FOLLOWING-PROGRESS\",\r\n        isFetching, userId\r\n    } as const\r\n}\r\n\r\nexport const followTC = (userId: number) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(followingProgress(true, userId))\r\n        UserAPI.followUser(userId).then(data => {\r\n            if (data.resultCode === 0) dispatch(follow(userId))\r\n            dispatch(followingProgress(false, userId))\r\n        })\r\n    }\r\n}\r\nexport const unfollowTC = (userId: number) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(followingProgress(true, userId))\r\n        UserAPI.unfollowUser(userId).then(data => {\r\n            if (data.resultCode === 0) dispatch(unfollow(userId))\r\n            dispatch(followingProgress(false, userId))\r\n        })\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/avatarnotfound.86317f4b.jpg\";","import React from \"react\";\r\nimport s from \"./Friends.module.css\";\r\nimport userPhoto from \"../../assets/images/avatarnotfound.jpg\";\r\nimport {initialStateType} from \"../../redux/friendsReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\n\r\ntype FriendsPropsType = {\r\n    friendsPage: initialStateType\r\n    followingInProgress: Array<number>\r\n    followTC: (userId: number) => void\r\n    unfollowTC: (userId: number) => void\r\n}\r\n\r\nexport const Friends = (\r\n    {\r\n        friendsPage,\r\n        followingInProgress,\r\n        followTC,\r\n        unfollowTC,\r\n    }: FriendsPropsType) => {\r\n\r\n    const followHandler = (fId: number, followStatus: boolean) => {\r\n        followStatus\r\n            ? unfollowTC(fId)\r\n            : followTC(fId)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<div>\r\n                    {pages.map(p => {\r\n                            return <span className={`${this.props.currentPage === p && s.selectedPage}`}\r\n                            onClick={()=>this.currentPageHandler(p)}>\r\n                                {p}</span>\r\n                        }\r\n                    )}\r\n                </div>\r\n*/}\r\n            {friendsPage.friends.map(f => <div key={f.id} className={s.friendsItem}>\r\n                <span className={s.generalBlock}>\r\n                    <div>\r\n                        <NavLink to={PATH.PROFILE + f.id}>\r\n                            <img className={s.avatar} alt={'userAvatar'}\r\n                                 src={f.photos.small != null ? f.photos.small : userPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <span className={s.info}>\r\n                        <div className={s.name}>{f.name}</div>\r\n                        <div>{f.status}</div>\r\n                    </span>\r\n\r\n                    <span className={s.location}>\r\n                        <div>{'f.location.country'}</div>\r\n                        <div>{'f.location.city'}</div>\r\n\r\n                        <button className={s.buttonFollow}\r\n                                onClick={() => {\r\n                                    followHandler(f.id, f.followed)\r\n                                }}\r\n                                disabled={followingInProgress.some(id => id === f.id)}>\r\n                            {f.followed ? \"Follow\" : \"Unfollow\"}\r\n                        </button>\r\n\r\n                    </span>\r\n\r\n                </span>\r\n\r\n            </div>)}\r\n        </>\r\n    )\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/rings.dbfd1db7.svg\";","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\nimport loadingGif from \"../../assets/images/rings.svg\";\r\n\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img className={s.loading} src={loadingGif} alt='loading'/>\r\n    </div>\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {followTC, initialStateType, unfollowTC} from \"../../redux/friendsReducer\";\r\nimport React from \"react\";\r\nimport {Friends} from \"./Friends\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\n\r\n\r\nclass FriendsAPIComponent extends React.Component<FriendsAPIComponentPropsType> {\r\n\r\n    render(): React.ReactNode {\r\n        return <div>\r\n            {this.props.isFetching ? <Preloader/>\r\n                : <Friends friendsPage={this.props.friendsPage}\r\n                           followingInProgress = {this.props.followingInProgress}\r\n                           followTC={this.props.followTC}\r\n                           unfollowTC={this.props.unfollowTC}\r\n\r\n                />}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport type FriendsAPIComponentPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nexport type mapStatePropsType = {\r\n    friendsPage: initialStateType\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nexport type mapDispatchPropsType = {\r\n    followTC: (userId: number) => void\r\n    unfollowTC: (userId: number) => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        friendsPage: state.friendsPage,\r\n        isFetching: state.friendsPage.isFetching,\r\n        followingInProgress: state.friendsPage.followingInProgress,\r\n    }\r\n}\r\n\r\n\r\nexport const FriendsContainer = connect(mapStateToProps,\r\n    {followTC, unfollowTC})(FriendsAPIComponent)\r\n","import React from \"react\";\r\nimport s from \"./Pagination.module.css\";\r\nimport {LEFT_PAGE, RIGHT_PAGE} from \"./PaginationContainer\";\r\n\r\ntype PaginationPropsType = {\r\n    pageLimit: number\r\n    totalRecords: number\r\n    currentPage: number\r\n    fetchPageNumbers: () => (string | number)[]\r\n    handleClick: (page: number | string) => void\r\n    handleMoveLeft: () => void\r\n    handleMoveRight: () => void\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = (\r\n    {\r\n        totalRecords,\r\n        pageLimit,\r\n        fetchPageNumbers,\r\n        currentPage,\r\n        handleClick,\r\n        handleMoveLeft,\r\n        handleMoveRight,\r\n\r\n    }) => {\r\n\r\n    const totalPages = Math.ceil(totalRecords / pageLimit);\r\n    const pages = fetchPageNumbers()\r\n    if (!totalRecords || totalPages === 1) return null\r\n\r\n    return (\r\n            <nav className={s.paginationBlock}>\r\n                <div className={s.totalCounter}>\r\n                    <span className={s.selectedItem}>{totalRecords}</span> Users\r\n                </div>\r\n\r\n                <div className={s.currentPage}>\r\n                    Page <span className={s.selectedItem}>{currentPage}</span>/{totalPages}\r\n                </div>\r\n\r\n                <ul className={s.totalBlocks}>\r\n                    {pages.map((page, index) => {\r\n                        if (page === LEFT_PAGE) return (\r\n                            <li key={index} className={s.pageItem}>\r\n                                <span aria-hidden=\"true\"\r\n                                      onClick={handleMoveLeft}>&laquo;</span>\r\n                            </li>\r\n                        );\r\n\r\n                        if (page === RIGHT_PAGE) return (\r\n                            <li key={index} className={s.pageItem}>\r\n                                <span aria-hidden=\"true\"\r\n                                      onClick={handleMoveRight}>&raquo;</span>\r\n                            </li>\r\n                        );\r\n\r\n                        return (\r\n                            <>\r\n                                <li key={index}\r\n                                    className={`${s.pageItem} ${currentPage === page && s.selectedPage}`}\r\n                                    onClick={() => handleClick(page)}>\r\n                                    {page}\r\n                                </li>\r\n\r\n                            </>\r\n                        )\r\n\r\n                    })}\r\n                </ul>\r\n            </nav>\r\n    )\r\n}\r\n","import {setFriends, toggleIsFetching} from \"./friendsReducer\";\r\nimport {UserAPI} from \"../api/Api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type initialStateType = {\r\n    pageLimit: number\r\n    totalCount: number\r\n    pageNeighbours: number\r\n    currentPage: number\r\n}\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    totalCount: 0,\r\n    pageLimit: 4,\r\n    pageNeighbours: 1,\r\n    currentPage: 1,\r\n}\r\n\r\nexport const paginationReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.page}\r\n        case \"SET-TOTAL-COUNT\":\r\n            return {...state, totalCount: action.totalCount}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalCount>\r\n    | ReturnType<typeof setFriends>\r\n    | ReturnType<typeof toggleIsFetching>\r\n\r\n\r\nexport const setTotalCount = (totalCount: number) => {\r\n    return {\r\n        type: \"SET-TOTAL-COUNT\",\r\n        totalCount\r\n    } as const\r\n}\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-PAGE\",\r\n        page\r\n    } as const\r\n}\r\n\r\nexport const getUsersTC = (currentPage: number, pageLimit: number) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n\r\n        UserAPI.getUsers(currentPage, pageLimit).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setFriends(data.items));\r\n            dispatch(setTotalCount(data.totalCount))\r\n        })\r\n    }\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport {Pagination} from \"./Pagination\";\r\nimport {getUsersTC,  setTotalCount} from \"../../../redux/paginationReducer\";\r\n\r\n\r\nexport const LEFT_PAGE = 'LEFT';\r\nexport const RIGHT_PAGE = 'RIGHT';\r\n\r\nconst range = (from: number | string, to: number, step = 1) => {\r\n    let i = from;\r\n    const range = [];\r\n\r\n    while (i <= to) {\r\n        range.push(i);\r\n        typeof i === \"number\" ? i += step : i = 0;\r\n    }\r\n\r\n    return range;\r\n}\r\n\r\n//https://www.digitalocean.com/community/tutorials/how-to-build-custom-pagination-with-react-ru\r\n\r\nclass PaginationAPIComponent extends React.Component<PaginationAPIComponentPropsType> {\r\n    componentDidMount(): void {\r\n        /*this.props.toggleIsFetching(true)\r\n        getUsers(this.props.currentPage, this.props.pageLimit).then(data => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setFriends(data.items);\r\n                this.props.setTotalCount(data.totalCount)\r\n            })*/\r\n        this.props.getUsersTC(this.props.currentPage, this.props.pageLimit)\r\n    }\r\n\r\n    fetchPageNumbers = () => {\r\n        const totalPages = Math.ceil(this.props.totalRecords / this.props.pageLimit);\r\n        const currentPage = this.props.currentPage;\r\n        const pageNeighbours = this.props.pageNeighbours;\r\n\r\n        const totalNumbers = (pageNeighbours * 2) + 3;\r\n        const totalBlocks = totalNumbers + 2;\r\n\r\n        if (totalPages > totalBlocks) {\r\n            const startPage = Math.max(2, currentPage - pageNeighbours);\r\n            const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\r\n            let pages = range(startPage, endPage);\r\n            const hasLeftSpill = startPage > 2;\r\n            const hasRightSpill = (totalPages - endPage) > 1;\r\n            const spillOffset = totalNumbers - (pages.length + 1);\r\n\r\n            switch (true) {\r\n                // handle: (1) < {5 6} [7] {8 9} (10)\r\n                case (hasLeftSpill && !hasRightSpill): {\r\n                    const extraPages = range(startPage - spillOffset, startPage - 1);\r\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n                    break;\r\n                }\r\n\r\n                // handle: (1) {2 3} [4] {5 6} > (10)\r\n                case (!hasLeftSpill && hasRightSpill): {\r\n                    const extraPages = range(endPage + 1, endPage + spillOffset);\r\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n\r\n                // handle: (1) < {4 5} [6] {7 8} > (10)\r\n                case (hasLeftSpill && hasRightSpill):\r\n                default: {\r\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return [1, ...pages, totalPages];\r\n        }\r\n\r\n        return range(1, totalPages);\r\n    }\r\n\r\n    handleClick = (page: number | string) => {\r\n\r\n        if (typeof page === \"number\") {\r\n            this.props.getUsersTC(page, this.props.pageLimit)\r\n        }\r\n    }\r\n    handleMoveLeft = () => {\r\n        const previousPage = this.props.currentPage - (this.props.pageNeighbours * 2) - 1\r\n        this.props.getUsersTC(previousPage, this.props.pageLimit)\r\n    }\r\n    handleMoveRight = () => {\r\n        const nextPage = this.props.currentPage + (this.props.pageNeighbours * 2) + 1\r\n        this.props.getUsersTC(nextPage, this.props.pageLimit)\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return <Pagination pageLimit={this.props.pageLimit}\r\n                           totalRecords={this.props.totalRecords}\r\n                           currentPage={this.props.currentPage}\r\n                           fetchPageNumbers={this.fetchPageNumbers}\r\n                           handleClick={this.handleClick}\r\n                           handleMoveLeft={this.handleMoveLeft}\r\n                           handleMoveRight={this.handleMoveRight}\r\n        />\r\n    }\r\n}\r\n\r\n\r\nexport type PaginationAPIComponentPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nexport type mapStatePropsType = {\r\n    pageLimit: number\r\n    totalRecords: number\r\n    pageNeighbours: number\r\n    currentPage: number\r\n\r\n}\r\nexport type mapDispatchPropsType = {\r\n    setTotalCount: (totalCount: number) => void\r\n    getUsersTC: (currentPage: number, pageLimit: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        pageLimit: state.pagination.pageLimit,\r\n        totalRecords: state.pagination.totalCount,\r\n        pageNeighbours: state.pagination.pageNeighbours,\r\n        currentPage: state.pagination.currentPage,\r\n\r\n    }\r\n}\r\n/*const mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        setFriends: (friends: Array<FriendType>) => {\r\n            dispatch(setFriendsAC(friends))\r\n        },\r\n        setCurrentPage: (page: number) => {\r\n            dispatch(setCurrentPageAC(page))\r\n        },\r\n        setTotalCount: (totalCount: number) => {\r\n            dispatch(setTotalCountAC(totalCount))\r\n        },\r\n        isFetchingHandler: (isFetching: boolean) => {\r\n            dispatch(isFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\nexport const PaginationContainer = connect(mapStateToProps, {\r\n    setTotalCount,\r\n    getUsersTC,\r\n})(PaginationAPIComponent)\r\n","import React from \"react\";\r\nimport {FriendsContainer} from \"./FriendsContainer\";\r\nimport {PaginationContainer} from \"./Pagination/PaginationContainer\";\r\n\r\nexport const FriendsPage = () => {\r\n    return (\r\n        <>\r\n            <PaginationContainer/>\r\n            <FriendsContainer/>\r\n        </>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {ProfileAPI} from \"../api/Api\";\r\n\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USERS_PROFILE = 'SET-USERS-PROFILE';\r\nconst SET_USER_STATUS = 'SET-USER-STATUS';\r\n\r\nexport type PostType = {\r\n    id: number;\r\n    message: string;\r\n    likeCount: number;\r\n}\r\ntype ContactsType = {\r\n    facebook: string\r\n    website: string | null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null,\r\n    github: string\r\n    mainLink: null\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n        {id: 2, message: \"It's my first post\", likeCount: 24},\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postText,\r\n                likeCount: 0\r\n            }\r\n\r\n            return {...state, posts: [...state.posts, newPost]};\r\n\r\n        // case UPDATE_NEW_POST:\r\n        //     return {...state, newPostText: action.newText};\r\n\r\n        case \"SET-USERS-PROFILE\":\r\n            return {...state, profile: action.profile}\r\n\r\n        case \"SET-USER-STATUS\":\r\n            return {...state, status: action.status}\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        postText\r\n    } as const\r\n}\r\n\r\n// export const onPostChangeAC = (newText: string) => {\r\n//     return {\r\n//         type: UPDATE_NEW_POST,\r\n//         newText\r\n//     } as const\r\n// }\r\nexport const setUsersProfile = (profile: ProfileType | null) => {\r\n    return {\r\n        type: SET_USERS_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const getUserProfileTC = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        ProfileAPI.getUsersProfile(userId).then(data => {\r\n            dispatch(setUsersProfile(data));\r\n        })\r\n    }\r\n}\r\nexport const getUserStatusTC = (userId: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        ProfileAPI.getStatus(userId).then(res => {\r\n            dispatch(setUserStatus(res.data));\r\n        })\r\n    }\r\n}\r\nexport const updateStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        ProfileAPI.updateStatus(status)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setUserStatus(status));\r\n                }\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostTypeProps = {\r\n    message: string;\r\n    id: number;\r\n    likeCount: number;\r\n}\r\n\r\nexport function Post(props: PostTypeProps) {\r\n    return (\r\n        <div>\r\n            <div className={s.posts}>\r\n                <div className={s.item}>\r\n                    <img src='https://telegra.ph/file/88a8f1c2805439c4c0d86.jpg' alt='avatar'/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>like: {props.likeCount} </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export const requiredField = (value: string) => {\r\n    if(value) return undefined;\r\n\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value && value.length > maxLength) return `The maximum length should be ${maxLength} characters`;\r\n\r\n    return undefined\r\n}","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from \"react\";\r\nimport s from './FormsControl.module.css'\r\nimport {WrappedFieldMetaProps} from \"redux-form\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nexport const FormControl: React.FC<FormsControlType> = ({\r\n                                                         input,\r\n                                                         meta,\r\n                                                         FormType,\r\n                                                         ...props\r\n                                                     }) => {\r\n    const error = meta.touched && meta.error\r\n    const finalInputName = `${s.formControl} ${error ? s.error : ''}`\r\n\r\n    return (\r\n        <div className={finalInputName}>\r\n            {error && <div className={s.errorMessage}>{meta.error}</div>}\r\n            <FormType {...input} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"textarea\" />\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"input\" />\r\n}","import React from 'react';\r\nimport s from \"./MyPost.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {ProfilePageType} from \"../../../redux/profileReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../ validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControl/FormsControl\";\r\n\r\n\r\ntype MyPostsProps = {\r\n    profilePage: ProfilePageType\r\n    addPost: (message: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPost: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const MyPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name={'newPost'} component={Textarea}\r\n                   placeholder='Write something'\r\n                   validate={[requiredField, maxLength100]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button className={s.button}>Add Post</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst MyPostReduxForm = reduxForm<FormDataType>({form: 'addMyPost'})(MyPostForm)\r\n\r\n\r\nexport function MyPosts(props: MyPostsProps) {\r\n\r\n    // const addPost = () => {\r\n    //     props.addPost(props.profilePage.newPostText)\r\n    //     props.updateNewPost('')\r\n    // }\r\n    // const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     props.updateNewPost(e.currentTarget.value)\r\n    // }\r\n\r\n    const addNewPost = (values: { newPost: string }) => {\r\n        props.addPost(values.newPost)\r\n    }\r\n\r\n    let postsElement =\r\n        props.profilePage.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div>\r\n                <h3>My posts:</h3>\r\n                <MyPostReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import {addPostAC, ProfilePageType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (message: string) => void\r\n}\r\n\r\nconst mapStatePropsType = (state: AppStateType): MapStatePropsType =>  {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (message: string) => {\r\n            dispatch(addPostAC(message))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStatePropsType, mapDispatchToProps)(MyPosts)","export default __webpack_public_path__ + \"static/media/noavatar.8233c8b6.png\";","import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusTypeProps = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusTypeProps> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        console.log(this)\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            status: this.props.status\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const userStatus = this.props.status ? this.props.status : 'no information'\r\n        return (\r\n            <div>\r\n                {!this.state.editMode\r\n                    ? <span onDoubleClick={this.activateEditMode}>{userStatus}</span>\r\n                    : <input value={this.state.status}\r\n                             onBlur={this.deactivateEditMode}\r\n                             onChange={this.onStatusChange}\r\n                             autoFocus/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/noavatar.png\";\r\nimport {ProfileStatus} from \"../Status/ProfileStatus\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                                profile,\r\n                                                                status,\r\n                                                                updateStatus\r\n                                                            }) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.cover}>\r\n                <img\r\n                    src='https://catherineasquithgallery.com/uploads/posts/2021-02/1612889502_62-p-krasnii-kiberpank-fon-101.jpg'\r\n                    alt='cover'/>\r\n            </div>\r\n            <div className={s.contentInfo}>\r\n                <div className={s.mainAvatar}>\r\n                    <img src={profile.photos.small ? profile.photos.small : userPhoto}\r\n                         alt='avatar'/>\r\n                </div>\r\n                <div className={s.describeProfile}>\r\n                    <h4>Basic Information</h4>\r\n                    <hr/>\r\n                    <div className={s.basicBlock}>\r\n                        <div className={`${s.basicItem} ${s.order}`}>\r\n                            Name:<br/>\r\n                            About me:<br/>\r\n                            Profession:<br/>\r\n                            Status:<br/>\r\n                        </div>\r\n                        <div className={s.basicItem}>\r\n                            {profile.fullName ? profile.fullName : 'no information'}<br/>\r\n                            {profile.aboutMe ? profile.aboutMe : 'no information'}<br/>\r\n                            {profile.lookingForAJob ? \"I'm locking for a job\"\r\n                                : profile.lookingForAJobDescription ? profile.lookingForAJobDescription\r\n                                    : 'no information'}<br/>\r\n                            {/*{profile.lookingForAJobDescription ? profile.lookingForAJobDescription*/}\r\n                            {/*    : 'no information'}<br/>*/}\r\n                            <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <h4>Contact Information</h4>\r\n                    <hr/>\r\n                    <div className={s.basicBlock}>\r\n                        <div className={`${s.basicItem} ${s.order}`}>\r\n                            Facebook:<br/>\r\n                            VK:<br/>\r\n                            Instagram:<br/>\r\n                            GitHub:<br/>\r\n                        </div>\r\n                        <div className={s.basicItem}>\r\n                            {profile.contacts.facebook ? profile.contacts.facebook : 'no information'}<br/>\r\n                            {profile.contacts.vk ? profile.contacts.vk : 'no information'}<br/>\r\n                            {profile.contacts.instagram ? profile.contacts.instagram : 'no information'}<br/>\r\n                            {profile.contacts.github ? profile.contacts.github : 'no information'}<br/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\n\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = ({\r\n                                                        profile,\r\n                                                        status,\r\n                                                        updateStatus\r\n                                                    }) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../App\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getUserProfileTC, getUserStatusTC, ProfileType, updateStatusTC} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount(): void {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            debugger\r\n           userId = this.props.userAuthId as string\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getUserStatusTC(userId)\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatusTC}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userAuthId: string | null\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getUserStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\ntype OwnPropsType = mapStatePropsType & mapDispatchPropsType\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userAuthId: state.auth.userId\r\n    }\r\n\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getUserStatusTC, updateStatusTC}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logoutTC: () => void\r\n}\r\n\r\nexport const Header: React.FC<HeaderPropsType> = ({isAuth, login, logoutTC}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://pbs.twimg.com/profile_banners/1341675636151132160/1608715543/1500x500' alt='label'/>\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div className={s.loginContainer}>\r\n                        {login}\r\n                    <button onClick={logoutTC}>Logout</button>\r\n                </div>\r\n                    : <NavLink to={PATH.LOGIN}>LOGIN</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}","import {AuthAPI} from \"../api/Api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type initialStateType = {\r\n    userId: string | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setAuthUserData> | StopSubmitActionType\r\n\r\n\r\nexport const setAuthUserData = (userId: string | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: \"SET-USER-DATA\",\r\n        payload: {userId, email, login, isAuth}\r\n    } as const\r\n}\r\nexport const getUserAPIDataTC = (): ThunkAction<any, AppStateType, unknown, ActionType> => {\r\n    return (dispatch) => {\r\n       return  AuthAPI.me().then(data => {\r\n            if (data.resultCode === 0) {\r\n                let {id, email, login} = data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n        })\r\n    }\r\n}\r\ntype StopSubmitActionType = ReturnType<typeof stopSubmit>\r\n\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): ThunkAction<void, AppStateType, unknown, ActionType> => {\r\n    return (dispatch) => {\r\n        AuthAPI.logIn(email, password, rememberMe)\r\n            .then(res => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(getUserAPIDataTC())\r\n                } else {\r\n                    let message = res.data.messages.length > 0\r\n                        ? res.data.messages[0]\r\n                        : 'ERROR: invalid email or password'\r\n                    dispatch(stopSubmit('login', {_error: message}))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const logoutTC = (): ThunkAction<void, AppStateType, unknown, ActionType> => (dispatch) => {\r\n    AuthAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n        })\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { logoutTC } from \"../../redux/authReducer\";\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n\r\n    render(): React.ReactNode {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logoutTC={this.props.logoutTC}/>\r\n    }\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    id: string | null\r\n}\r\ntype mapDispatchPropsType = {\r\n    logoutTC: () => void\r\n}\r\ntype PropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n        id: state.auth.userId\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logoutTC})(HeaderContainer)","import React from \"react\";\r\nimport s from './Login.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControl/FormsControl\";\r\nimport {requiredField} from \"../../ validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'} name={'email'}\r\n                       component={Input}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} type='password'\r\n                       component={Input} validate={[requiredField]}/>\r\n            </div>\r\n            <div className={s.item}>\r\n                <Field type='checkbox' name={'rememberMe'} component={'input'}/> Remember me\r\n            </div>\r\n            <div className={s.item}>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n        {props.error &&\r\n        <div className={s.itemError}>\r\n            {props.error}\r\n        </div>}\r\n    </>\r\n}\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    userId: string | null\r\n    loginTC: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({isAuth, userId, loginTC}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        loginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE + userId}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    userId: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {loginTC})(Login)","\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\n\r\nexport type DialogType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type MessageType = {\r\n    id: number;\r\n    message: string;\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>;\r\n    messages: Array<MessageType>;\r\n}\r\n\r\nconst initialState: DialogPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Terra\"},\r\n        {id: 2, name: \"Azumy\"},\r\n        {id: 3, name: \"Bria\"},\r\n        {id: 4, name: \"Keren\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi! How are yoy?\"},\r\n        {id: 2, message: \"Don't give up!\"},\r\n        {id: 3, message: \"Just do it\"},\r\n        {id: 4, message: \"Could you help me?\"}\r\n    ],\r\n\r\n}\r\n\r\nexport const dialogReducer = (state = initialState, action: ActionType):DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n            id:  new Date().getTime(),\r\n            message: action.messageText\r\n        }\r\n            return {...state, messages: [...state.messages, newMessage]}\r\n\r\n        // case UPDATE_NEW_MESSAGE:\r\n        //    // state.newTextMessage = action.newMessage\r\n        //     return {...state, newTextMessage: action.newMessage}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addMessageAC>\r\n\r\nexport const addMessageAC = (messageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        messageText: messageText\r\n    } as const\r\n}\r\n\r\n// export const onMessageChangeAC = (newMessage: string) => {\r\n//     return {\r\n//         type: UPDATE_NEW_MESSAGE,\r\n//         newMessage: newMessage\r\n//     } as const\r\n// }","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./DialogItem.module.css\"\r\n\r\n\r\n\r\ntype DialogItemProps = {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport function DialogItem(props: DialogItemProps) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\ntype DialogMessageProps = {\r\n    message: string;\r\n    id: number;\r\n}\r\n\r\nexport function Message(props: DialogMessageProps) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/dialogsReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, requiredField} from \"../../ validators/validators\";\r\n\r\n\r\ntype DialogsProps = {\r\n    dialogPage: DialogPageType;\r\n    addMessage: (messageText: string) => void\r\n    onMessageChange: (newMessage: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport function Dialogs(props: DialogsProps) {\r\n\r\n    // const addMessage = () => {\r\n    //     props.addMessage(props.dialogPage.newTextMessage)\r\n    //     props.onMessageChange('')\r\n    // }\r\n    // const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     props.onMessageChange(e.currentTarget.value)\r\n    // }\r\n\r\n    const addNewMessage = (values: { textMessage: string }) => {\r\n        props.addMessage(values.textMessage)\r\n    }\r\n\r\n    let dialogElements =\r\n        props.dialogPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n\r\n    let messagesElements =\r\n        props.dialogPage.messages.map(msg => <Message key={msg.id} message={msg.message} id={msg.id}/>);\r\n\r\n    return (\r\n        <>\r\n            <div className={s.textarea}>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItem}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    textMessage: string\r\n}\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name='textMessage'\r\n                   placeholder='Enter your message'\r\n                   validate={[requiredField, maxLength100]}\r\n            />\r\n            <div>\r\n                <button className={s.button}>Add Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'addMessage'})(AddMessageForm)\r\n","import {addMessageAC, DialogPageType} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\n\r\n//здесь пример с использование Consumer\r\n/*export function DialogsContainer(props: DialogsContainerProps) {\r\n\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {(store) => {\r\n                const state = store.getState();\r\n\r\n                const addMessage = (messageText: string) => {\r\n                    store.dispatch(addMessageAC(messageText))\r\n                    store.dispatch(onMessageChangeAC(''))\r\n                }\r\n                const onMessageChange = (newMessage: string) => {\r\n                    store.dispatch(onMessageChangeAC(newMessage))\r\n                }\r\n\r\n                return <Dialogs dialogPage={state.dialogPage}\r\n                                addMessage={addMessage}\r\n                                onMessageChange={onMessageChange}/>\r\n            }}\r\n\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (messageText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (messageText: string) => {\r\n            dispatch(addMessageAC(messageText))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {getUserAPIDataTC} from \"./authReducer\";\r\n\r\nexport type initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-INITIALISED\":\r\n            return {...state, initialized: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setInitialised>\r\n\r\n\r\nexport const setInitialised = () => {\r\n    return {\r\n        type: \"SET-INITIALISED\",\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkAction<void, AppStateType, unknown, ActionType> => {\r\n    return (dispatch) => {\r\n      dispatch(getUserAPIDataTC())\r\n          .then (() => {\r\n                dispatch(setInitialised())\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\ntype PropsType = {\r\n    userId: string | null\r\n}\r\n\r\nexport function Navbar (props: PropsType) {\r\n\r\n    return (\r\n            <nav className={s.nav}>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.PROFILE + props.userId} activeClassName={s.active}>Profile</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.DIALOGS} activeClassName={s.active}>Messages</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.NEWS} activeClassName={s.active}>News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.MUSIC} activeClassName={s.active}>Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.FIND_FRIENDS} activeClassName={s.active}>Friends</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.SETTINGS} activeClassName={s.active}>Settings</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\r\n                </div>\r\n            </nav>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType, setUsersProfile} from \"../../redux/profileReducer\";\r\nimport {Navbar} from \"./Navbar\";\r\n\r\nclass NavbarContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount(): void {\r\n\r\n        let userId = this.props.userId\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId, {withCredentials: true})\r\n            .then(response => {\r\n                this.props.setUsersProfile(response.data)\r\n            })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return <Navbar userId={this.props.userId}/>\r\n    }\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n    userId: string | null\r\n}\r\ntype mapDispatchPropsType = {\r\n    setUsersProfile: (profile: ProfileType | null) => void\r\n}\r\ntype PropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {setUsersProfile})(NavbarContainer)","import React from 'react';\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport './App.css';\nimport {FriendsPage} from \"./components/Friends/FriendsPage\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from \"./components/Login/Login\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport {Preloader} from \"./common/Preloader/Preloader\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\n\n\nexport const PATH = {\n    PROFILE: '/profile/',\n    DIALOGS: '/dialogs/',\n    NEWS: '/news/',\n    MUSIC: '/music/',\n    SETTINGS: '/settings/',\n    FIND_FRIENDS: '/findFriends/',\n    LOGIN: '/login/',\n}\n\ntype AppPropsType = {\n    initialized: boolean\n    initializeApp: () => void\n}\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) return <Preloader/>\n\n        return (\n            <HashRouter>\n                <div className='app-wrapper'>\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className='content'>\n                        <Switch>\n                            <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n\n                            <Route path={PATH.PROFILE + ':userId'}\n                                   render={() => <ProfileContainer/>}/>\n                            <Route path={PATH.DIALOGS}\n                                   render={() => <DialogsContainer/>}/>\n                            <Route path={PATH.NEWS} render={() => <News/>}/>\n                            <Route path={PATH.MUSIC} render={() => <Music/>}/>\n                            <Route path={PATH.FIND_FRIENDS} render={() => <FriendsPage/>}/>\n                            <Route path={PATH.SETTINGS} render={() => <Settings/>}/>\n                            <Route path={PATH.LOGIN} render={() => <Login/>}/>\n                        </Switch>\n                    </div>\n\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\ntype mapStatePropsType = {\n    initialized: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\n\nexport default connect(mapStateToProps, {initializeApp})(App)\n","export type SidebarType = {}\r\n\r\nconst initialState: SidebarType = {}\r\n\r\nexport const sideBarReducer = (state = initialState, action: any): SidebarType => {\r\n\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {dialogReducer} from \"./dialogsReducer\";\r\nimport {sideBarReducer} from \"./sideBarReducer\";\r\nimport {friendsReducer} from \"./friendsReducer\";\r\nimport {paginationReducer} from \"./paginationReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./appReducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sidebar: sideBarReducer,\r\n    friendsPage: friendsReducer,\r\n    pagination: paginationReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport {store} from \"./redux/redux-store\";\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsItem\":\"Friends_friendsItem__1z8Rr\",\"generalBlock\":\"Friends_generalBlock__1nnYb\",\"avatar\":\"Friends_avatar__19sMf\",\"info\":\"Friends_info__1B_iw\",\"name\":\"Friends_name__1H0jP\",\"buttonFollow\":\"Friends_buttonFollow__3Rq8Q\",\"location\":\"Friends_location__gZKax\",\"selectedPage\":\"Friends_selectedPage__2k4r0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3FZa8\",\"dialogsItem\":\"Dialogs_dialogsItem__1PTrf\",\"messages\":\"Dialogs_messages__XRR94\",\"button\":\"Dialogs_button__w9F2l\",\"textarea\":\"Dialogs_textarea__3dxXe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__37fLX\",\"item\":\"Login_item__1I-PT\",\"itemError\":\"Login_itemError__2wtkp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPost_postBlock__1hg6I\",\"posts\":\"MyPost_posts__9OGtt\",\"button\":\"MyPost_button__6BLQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__1wB4j\",\"error\":\"FormsControl_error__LmK2M\",\"errorMessage\":\"FormsControl_errorMessage__2BR3w\",\"blink1\":\"FormsControl_blink1__1ZTu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1vXGy\",\"loginBlock\":\"Header_loginBlock__8AO3e\",\"loginContainer\":\"Header_loginContainer__1z_Po\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Rw3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__-cKzQ\",\"active\":\"DialogItem_active__gIi1x\"};"],"sourceRoot":""}