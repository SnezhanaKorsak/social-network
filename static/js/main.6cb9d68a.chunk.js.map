{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPost.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Header/Header.module.css","reportWebVitals.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/dialogsReducer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","App.tsx","redux/sideBarReducer.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","s","header","src","Navbar","nav","item","to","PATH","PROFILE","activeClassName","active","DIALOGS","NEWS","MUSIC","SETTINGS","ProfileInfo","cover","contentInfo","mainAvatar","describeProfile","ADD_POST","UPDATE_NEW_POST","initialState","posts","id","message","likeCount","newPostText","onPostChangeAC","newText","type","Post","props","MyPostsContainer","connect","state","profilePage","dispatch","addPost","postText","updateNewPost","postsElement","map","p","postBlock","value","onChange","e","currentTarget","button","onClick","Profile","content","News","Music","Settings","ADD_MESSAGE","UPDATE_NEW_MESSAGE","dialogs","name","messages","newTextMessage","onMessageChangeAC","newMessage","DialogItem","path","dialog","Message","DialogsContainer","dialogPage","addMessage","messageText","addMessageAC","onMessageChange","dialogElements","d","messagesElements","msg","placeholder","dialogsItem","App","exact","render","rootReducer","combineReducers","action","newPost","Date","getTime","sidebar","store","createStore","renderTree","ReactDOM","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.6cb9d68a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1zCja\",\"item\":\"Navbar_item__24pIL\",\"active\":\"Navbar_active__3Lxyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentInfo\":\"ProfileInfo_contentInfo__2zTE7\",\"mainAvatar\":\"ProfileInfo_mainAvatar__2z29I\",\"cover\":\"ProfileInfo_cover__2z3gO\",\"describeProfile\":\"ProfileInfo_describeProfile__1_7Ui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPost_postBlock__1hg6I\",\"posts\":\"MyPost_posts__9OGtt\",\"button\":\"MyPost_button__6BLQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3FZa8\",\"dialogsItem\":\"Dialogs_dialogsItem__1PTrf\",\"messages\":\"Dialogs_messages__XRR94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Rw3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__-cKzQ\",\"active\":\"DialogItem_active__gIi1x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1vXGy\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nexport function Header() {\r\n    return (\r\n\r\n            <header className={s.header}>\r\n                <img src='https://pbs.twimg.com/profile_banners/1341675636151132160/1608715543/1500x500' />\r\n            </header>\r\n\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\nexport function Navbar () {\r\n\r\n    return (\r\n            <nav className={s.nav}>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.DIALOGS} activeClassName={s.active}>Messages</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.NEWS} activeClassName={s.active}>News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.MUSIC} activeClassName={s.active}>Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to={PATH.SETTINGS} activeClassName={s.active}>Settings</NavLink>\r\n                </div>\r\n            </nav>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nexport function ProfileInfo() {\r\n    return (\r\n        <div>\r\n            <div className={s.cover}>\r\n                <img\r\n                    src='https://catherineasquithgallery.com/uploads/posts/2021-02/1612889502_62-p-krasnii-kiberpank-fon-101.jpg'/>\r\n            </div>\r\n            <div className={s.contentInfo}>\r\n                <div className={s.mainAvatar}>\r\n                    <img src='https://telegra.ph/file/88a8f1c2805439c4c0d86.jpg'/>\r\n                </div>\r\n                <div className={s.describeProfile}>\r\n                    My profile description\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST = 'UPDATE-NEW-POST';\r\n\r\nexport type PostType = {\r\n    id: number;\r\n    message: string;\r\n    likeCount: number;\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>;\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n        posts: [\r\n            {id: 1, message: \"Hi, how are you?\", likeCount: 12},\r\n            {id: 2, message: \"It's my first post\", likeCount: 24},\r\n        ],\r\n        newPostText: ''\r\n    }\r\n\r\nexport const profileReducer = (state= initialState, action: ActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.postText,\r\n                likeCount: 0\r\n            }\r\n           // state.posts.push(newPost)\r\n\r\n            return {...state, posts: [...state.posts, newPost]};\r\n\r\n        case UPDATE_NEW_POST:\r\n            return {...state, newPostText: action.newText};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addPostAC> | ReturnType<typeof onPostChangeAC>\r\n\r\nexport const addPostAC = (postText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        postText: postText\r\n    } as const\r\n}\r\n\r\nexport const onPostChangeAC = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST,\r\n        newText: newText\r\n    } as const\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostTypeProps = {\r\n    message: string;\r\n    id: number;\r\n    likeCount: number;\r\n}\r\n\r\nexport function Post(props: PostTypeProps) {\r\n    return (\r\n        <div>\r\n            <div className={s.posts}>\r\n                <div className={s.item}>\r\n                    <img src='https://telegra.ph/file/88a8f1c2805439c4c0d86.jpg'/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>like: {props.likeCount} </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {addPostAC, onPostChangeAC, ProfilePageType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (message: string) => void\r\n    updateNewPost: (newText: string) => void\r\n}\r\n\r\nconst mapStatePropsType = (state: AppStateType): MapStatePropsType =>  {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (message: string) => {\r\n            dispatch(addPostAC(message))\r\n            dispatch(onPostChangeAC(''))\r\n        },\r\n        updateNewPost: (newText: string) => {\r\n            dispatch(onPostChangeAC(newText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStatePropsType, mapDispatchToProps)(MyPosts)","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPost.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {ProfilePageType} from \"../../../redux/profileReducer\";\r\n\r\n\r\ntype MyPostsProps = {\r\n    profilePage: ProfilePageType\r\n    addPost: (message: string) => void\r\n    updateNewPost: (newText: string) => void\r\n}\r\n\r\n\r\nexport function MyPosts(props: MyPostsProps) {\r\n\r\n    const addPost = () => {\r\n        props.addPost(props.profilePage.newPostText)\r\n        props.updateNewPost('')\r\n    }\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPost(e.currentTarget.value)\r\n    }\r\n\r\n    let postsElement =\r\n        props.profilePage.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div>\r\n                <h3>My posts:</h3>\r\n                <div>\r\n                    <div>\r\n                        <textarea value={props.profilePage.newPostText} onChange={onPostChange}/>\r\n                    </div>\r\n                    <div>\r\n                        <button className={s.button} onClick={addPost}>Add Post</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\n\r\n\r\ntype ProfileProps = {\r\n    /*store: StoreType*/\r\n  /*  dispatch: (action: ActionsType) => void*/\r\n}\r\n\r\nexport function Profile(props: ProfileProps) {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function News() {\r\n    return (\r\n        <div>\r\n           News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Music() {\r\n    return (\r\n        <div>\r\n          Music\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Settings() {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\nconst UPDATE_NEW_MESSAGE = 'UPDATE-NEW-MESSAGE';\r\n\r\nexport type DialogType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type MessageType = {\r\n    id: number;\r\n    message: string;\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>;\r\n    messages: Array<MessageType>;\r\n    newTextMessage: string\r\n}\r\n\r\nconst initialState: DialogPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Terra\"},\r\n        {id: 2, name: \"Azumy\"},\r\n        {id: 3, name: \"Bria\"},\r\n        {id: 4, name: \"Keren\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi! How are yoy?\"},\r\n        {id: 2, message: \"Don't give up!\"},\r\n        {id: 3, message: \"Just do it\"},\r\n        {id: 4, message: \"Could you help me?\"}\r\n    ],\r\n    newTextMessage: '',\r\n}\r\n\r\nexport const dialogReducer = (state = initialState, action: ActionType):DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n            id:  new Date().getTime(),\r\n            message: action.messageText\r\n        }\r\n           // state.messages.push(newMessage)\r\n\r\n            return {...state, messages: [...state.messages, newMessage]}\r\n\r\n        case UPDATE_NEW_MESSAGE:\r\n           // state.newTextMessage = action.newMessage\r\n            return {...state, newTextMessage: action.newMessage}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = ReturnType<typeof addMessageAC> | ReturnType<typeof onMessageChangeAC>\r\n\r\nexport const addMessageAC = (messageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        messageText: messageText\r\n    } as const\r\n}\r\n\r\nexport const onMessageChangeAC = (newMessage: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE,\r\n        newMessage: newMessage\r\n    } as const\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./DialogItem.module.css\"\r\n\r\n\r\n\r\ntype DialogItemProps = {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport function DialogItem(props: DialogItemProps) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\ntype DialogMessageProps = {\r\n    message: string;\r\n    id: number;\r\n}\r\n\r\nexport function Message(props: DialogMessageProps) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {addMessageAC, DialogPageType, onMessageChangeAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//здесь пример с использование Consumer\r\n/*export function DialogsContainer(props: DialogsContainerProps) {\r\n\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {(store) => {\r\n                const state = store.getState();\r\n\r\n                const addMessage = (messageText: string) => {\r\n                    store.dispatch(addMessageAC(messageText))\r\n                    store.dispatch(onMessageChangeAC(''))\r\n                }\r\n                const onMessageChange = (newMessage: string) => {\r\n                    store.dispatch(onMessageChangeAC(newMessage))\r\n                }\r\n\r\n                return <Dialogs dialogPage={state.dialogPage}\r\n                                addMessage={addMessage}\r\n                                onMessageChange={onMessageChange}/>\r\n            }}\r\n\r\n        </StoreContext.Consumer>\r\n    )\r\n}*/\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (messageText: string) => void\r\n    onMessageChange: (newMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (messageText: string) => {\r\n            dispatch(addMessageAC(messageText))\r\n            dispatch(onMessageChangeAC(''))\r\n        },\r\n        onMessageChange: (newMessage: string) => {\r\n            dispatch(onMessageChangeAC(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogPageType} from \"../../redux/dialogsReducer\";\r\n\r\n\r\ntype DialogsProps = {\r\n    dialogPage: DialogPageType;\r\n    addMessage: (messageText: string) => void\r\n    onMessageChange: (newMessage: string) => void\r\n}\r\n\r\nexport function Dialogs(props: DialogsProps) {\r\n\r\n\r\n    const addMessage = () => {\r\n        props.addMessage(props.dialogPage.newTextMessage)\r\n        props.onMessageChange('')\r\n    }\r\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onMessageChange(e.currentTarget.value)\r\n    }\r\n\r\n    let dialogElements =\r\n        props.dialogPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n\r\n    let messagesElements =\r\n        props.dialogPage.messages.map(msg => <Message key={msg.id} message={msg.message} id={msg.id}/>);\r\n\r\n    return (\r\n        <>\r\n            <textarea value={props.dialogPage.newTextMessage}\r\n                      onChange={onMessageChange}\r\n                      placeholder={'Enter your message'}/>\r\n\r\n            <div>\r\n                <button onClick={addMessage}>Add Message</button>\r\n            </div>\r\n\r\n            <div className={s.dialogs}>\r\n\r\n                <div className={s.dialogsItem}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport {Header} from \"./components/Header/Header\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {Profile} from \"./components/Profile/Profile\";\nimport {Dialogs} from \"./components/Dialogs/Dialogs\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {StoreType} from \"./redux/store\";\nimport './App.css';\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\n\n\ntype AppPropsType = {\n    /*store: StoreType*/\n}\nexport const PATH = {\n    PROFILE: '/profile',\n    DIALOGS: '/dialogs',\n    NEWS: '/news',\n    MUSIC: '/music',\n    SETTINGS: '/settings'\n}\n\n\nfunction App(props: AppPropsType) {\n   /* const state = props.store.getState();*/\n\n    return (\n        <HashRouter>\n            <div className='app-wrapper'>\n                <Header/>\n                <Navbar/>\n                <div className='content'>\n                    <Switch>\n                        <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\n\n                        <Route path={PATH.PROFILE}\n                               render={() => <Profile />}/>\n                        <Route path={PATH.DIALOGS}\n                               render={() => <DialogsContainer />}/>\n                        <Route path={PATH.NEWS} render={() => <News/>}/>\n                        <Route path={PATH.MUSIC} render={() => <Music/>}/>\n                        <Route path={PATH.SETTINGS} render={() => <Settings/>}/>\n                    </Switch>\n                </div>\n\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","export type SidebarType = {}\r\n\r\nconst initialState: SidebarType = {}\r\n\r\nexport const sideBarReducer = (state = initialState, action: any): SidebarType => {\r\n\r\n    return state\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {dialogReducer} from \"./dialogsReducer\";\r\nimport {sideBarReducer} from \"./sideBarReducer\";\r\n\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sidebar: sideBarReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer)\r\n\r\n\r\n\r\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport {store} from \"./redux/redux-store\";\n\n\nconst renderTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\nrenderTree()\nstore.subscribe(renderTree)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}